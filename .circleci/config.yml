version: 2.1

commands:
  checkout_merge:
    description: "checkout merge branch"
    steps:
      - checkout
  apt_install:
    parameters:
      args:
        type: string
      descr:
        type: string
        default: ""
      update:
        type: boolean
        default: true
    steps:
      - run:
          name: >
            <<^ parameters.descr >> apt install << parameters.args >> <</ parameters.descr >>
            <<# parameters.descr >> << parameters.descr >>            <</ parameters.descr >>
          command: |
            <<# parameters.update >> sudo apt update -qy  <</ parameters.update >>
            sudo apt install << parameters.args >>
  pip_install:
    parameters:
      args:
        type: string
      descr:
        type: string
        default: ""
      user:
        type: boolean
        default: true
    steps:
      - run:
          name: >
            <<^ parameters.descr >> pip install << parameters.args >> <</ parameters.descr >>
            <<# parameters.descr >> << parameters.descr >>            <</ parameters.descr >>
          command: >
            pip install
            <<# parameters.user >> --user <</ parameters.user >>
            --progress-bar=off
            << parameters.args >>

  install_rlhive:
    parameters:
      editable:
        type: boolean
        default: true
    steps:
      - pip_install:
          args: --pre torch -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html
          descr: Install PyTorch from nightly releases
      - pip_install:
          args: --no-build-isolation <<# parameters.editable >> --editable <</ parameters.editable >> .
          descr: Install rlhive <<# parameters.editable >> in editable mode <</ parameters.editable >>


binary_common: &binary_common
  parameters:
    # Edit these defaults to do a release
    build_version:
      description: "version number of release binary; by default, build a nightly"
      type: string
      default: ""
    pytorch_version:
      description: "PyTorch version to build against; by default, use a nightly"
      type: string
      default: ""
    # Don't edit these
    python_version:
      description: "Python version to build against (e.g., 3.7)"
      type: string
    cu_version:
      description: "CUDA version to build against, in CU format (e.g., cpu or cu100)"
      type: string
      default: "cpu"
    unicode_abi:
      description: "Python 2.7 wheel only: whether or not we are cp27mu (default: no)"
      type: string
      default: ""
    wheel_docker_image:
      description: "Wheel only: what docker image to use"
      type: string
      default: "pytorch/manylinux-cuda113"
    conda_docker_image:
      description: "Conda only: what docker image to use"
      type: string
      default: "pytorch/conda-builder:cpu"
  environment:
    PYTHON_VERSION: << parameters.python_version >>
    PYTORCH_VERSION: << parameters.pytorch_version >>
    UNICODE_ABI: << parameters.unicode_abi >>
    CU_VERSION: << parameters.cu_version >>

jobs:

  lint_python_and_config:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - pip_install:
          args: pre-commit
          descr: Install lint utilities
      - run:
          name: Install pre-commit hooks
          command: pre-commit install-hooks
      - run:
          name: Lint Python code and config files
          command: pre-commit run --all-files
      - run:
          name: Required lint modifications
          when: on_fail
          command: git --no-pager diff


  type_check_python:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - pip_install:
          args: cmake ninja
          descr: Install CMake and Ninja
      - install_rlhive:
          editable: true
      - pip_install:
          args: mypy
          descr: Install Python type check utilities
      - run:
          name: Check Python types statically
          command: mypy --install-types --non-interactive --config-file mypy.ini

  unittest_linux_cpu:
    <<: *binary_common

    docker:
      - image: "pytorch/manylinux-cuda113"
    resource_class: 2xlarge+

    environment:
      TAR_OPTIONS: --no-same-owner
      PYTHON_VERSION: << parameters.python_version >>
      CU_VERSION: << parameters.cu_version >>

    steps:
      - checkout
      - run:
          name: Generate cache key
          # This will refresh cache on Sundays, nightly build should generate new cache.
          command: echo "$(date +"%Y-%U")" > .circleci-weekly
      - restore_cache:
          keys:
            - env-v2-linux-{{ arch }}-py<< parameters.python_version >>-{{ checksum ".circleci/unittest/linux/scripts/environment.yml" }}-{{ checksum ".circleci-weekly" }}
      - run:
          name: Setup
          command: .circleci/unittest/linux/scripts/setup_env.sh

      - save_cache:

          key: env-v2-linux-{{ arch }}-py<< parameters.python_version >>-{{ checksum ".circleci/unittest/linux/scripts/environment.yml" }}-{{ checksum ".circleci-weekly" }}

          paths:
            - conda
            - env
      - run:
          name: Install rlhive
          command: .circleci/unittest/linux/scripts/install.sh
      - run:
          name: Run tests
          command: .circleci/unittest/linux/scripts/run_test.sh

      - run:
          name: Codecov upload
          command: |
            bash <(curl -s https://codecov.io/bash) -Z -F linux-cpu

      - run:
          name: Post process
          command: .circleci/unittest/linux/scripts/post_process.sh
      - store_test_results:
          path: test-results

  unittest_linux_gpu:
    <<: *binary_common
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.medium
    environment:
      image_name: "pytorch/manylinux-cuda113"
      TAR_OPTIONS: --no-same-owner
      PYTHON_VERSION: << parameters.python_version >>
      CU_VERSION: << parameters.cu_version >>

    steps:
      - checkout
      - run:
          name: Generate cache key
          # This will refresh cache on Sundays, nightly build should generate new cache.
          command: echo "$(date +"%Y-%U")" > .circleci-weekly
      - restore_cache:

          keys:
            - env-v3-linux-{{ arch }}-py<< parameters.python_version >>-{{ checksum ".circleci/unittest/linux/scripts/environment.yml" }}-{{ checksum ".circleci-weekly" }}

      - run:
          name: Setup
          command: docker run -e PYTHON_VERSION -t --gpus all -v $PWD:$PWD -w $PWD "${image_name}" .circleci/unittest/linux/scripts/setup_env.sh
      - save_cache:

          key: env-v3-linux-{{ arch }}-py<< parameters.python_version >>-{{ checksum ".circleci/unittest/linux/scripts/environment.yml" }}-{{ checksum ".circleci-weekly" }}

          paths:
            - conda
            - env
      - run:
          name: Install rlhive
#          command: bash .circleci/unittest/linux/scripts/install.sh
          command: docker run -t --gpus all -v $PWD:$PWD -w $PWD -e UPLOAD_CHANNEL -e CU_VERSION "${image_name}" .circleci/unittest/linux/scripts/install.sh
      - run:
          name: Run tests
          command: bash .circleci/unittest/linux/scripts/run_test.sh
#          command: docker run --env-file ./env.list -t --gpus all -v $PWD:$PWD -w $PWD "${image_name}" .circleci/unittest/linux/scripts/run_test.sh
      - run:
          name: Codecov upload
          command: |
            bash <(curl -s https://codecov.io/bash) -Z -F linux-gpu
      - run:
          name: Post Process
          command: docker run -t --gpus all -v $PWD:$PWD -w $PWD "${image_name}" .circleci/unittest/linux/scripts/post_process.sh
      - store_test_results:
          path: test-results



workflows:
  lint:
    jobs:
#      - circleci_consistency
      - lint_python_and_config
#      - type_check_python

  unittest:
    jobs:
      - unittest_linux_cpu:
          cu_version: cpu
          name: unittest_linux_cpu_py3.7
          python_version: '3.7'
      - unittest_linux_gpu:
          cu_version: cu113
          name: unittest_linux_gpu_py3.7
          python_version: '3.7'

      - unittest_linux_cpu:
          cu_version: cpu
          name: unittest_linux_cpu_py3.8
          python_version: '3.8'
      - unittest_linux_gpu:
          cu_version: cu113
          name: unittest_linux_gpu_py3.8
          python_version: '3.8'


      - unittest_linux_cpu:
          cu_version: cpu
          name: unittest_linux_cpu_py3.9
          python_version: '3.9'
      - unittest_linux_gpu:
          cu_version: cu113
          name: unittest_linux_gpu_py3.9
          python_version: '3.9'

      - unittest_linux_cpu:
          cu_version: cpu
          name: unittest_linux_cpu_py3.10
          python_version: '3.10'
      - unittest_linux_gpu:
          cu_version: cu113
          name: unittest_linux_gpu_py3.10
          python_version: '3.10'
